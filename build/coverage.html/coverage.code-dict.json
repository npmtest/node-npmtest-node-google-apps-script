{"/home/travis/build/npmtest/node-npmtest-node-google-apps-script/test.js":"/* istanbul instrument in package npmtest_node_google_apps_script */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - init-after\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - init-after\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-node-google-apps-script/lib.npmtest_node_google_apps_script.js":"/* istanbul instrument in package npmtest_node_google_apps_script */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_node_google_apps_script = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_node_google_apps_script = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-node-google-apps-script/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-node-google-apps-script && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_node_google_apps_script */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_node_google_apps_script\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // init-after\n    // run browser js-env code - init-after\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_node_google_apps_script.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_node_google_apps_script.rollup.js'] =\n            local.assetsDict['/assets.npmtest_node_google_apps_script.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_node_google_apps_script.__dirname + '/lib.npmtest_node_google_apps_script.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-node-google-apps-script/node_modules/node-google-apps-script/index.js":"module.exports.auth = require('./lib/commands/auth');\nmodule.exports.init = require('./lib/commands/init');\nmodule.exports.upload = require('./lib/commands/upload');\nmodule.exports.defaults = require('./lib/defaults');\n","/home/travis/build/npmtest/node-npmtest-node-google-apps-script/node_modules/node-google-apps-script/lib/commands/auth.js":"var colors = require('colors');\nvar readline = require('readline');\nvar OAuth2Client = require('googleapis').auth.OAuth2;\n\nvar Promise = require('bluebird');\nvar fs = Promise.promisifyAll(require('fs'));\n\nvar defaults = require('../defaults');\n\nvar GOOGLE_AUTH_SCOPE = [\n  'https://www.googleapis.com/auth/drive',\n  'https://www.googleapis.com/auth/drive.scripts'\n];\n\nmodule.exports = function auth(clientSecretPath, withWebserver) {\n  return fs.lstatAsync(defaults.STORAGE_FILE)\n    .then(function() {\n      console.log(defaults.STORAGE_FILE + ' already exists. Remove it to re-authenticate node-google-apps-script');\n      return Promise.resolve();\n    })\n    .catch(function(err) {\n      if (!clientSecretPath) {\n        throw defaults.STORAGE_FILE + ' does not exist yet. Specify a credential file with `--auth ~/Downloads/client_secret_abcd.json`';\n      }\n      return performAuthenticationFlow(clientSecretPath, withWebserver);\n    });\n};\n\nfunction performAuthenticationFlow(clientSecretPath, withWebserver) {\n  return getCredentialsFromFile(clientSecretPath)\n      .then(function(credentials) {\n        return authenticateWithGoogle(credentials, withWebserver);\n      })\n      .then(saveAuthenticationConfig)\n      .then(cleanUp)\n      .then(function() {\n        console.log('Successfully Authenticated with Google Drive!'.green);\n      })\n      .catch(function(err) {\n        console.log('Error running auth command'.underline.red);\n        throw err;\n      });\n}\n\nfunction getCredentialsFromFile(clientSecretPath) {\n  return fs.readFileAsync(clientSecretPath)\n    .then(JSON.parse)\n    .then(function(credentials) {\n      if (!credentials.installed) {\n        throw 'Path did not include \"OAuth 2.0 client ID\" credentials. Please check that you downloaded the right JSON credentials.';\n      }\n      \n      // Add important auth information to persist\n      // return credentials\n      return {\n        client_id: credentials.installed.client_id,\n        client_secret: credentials.installed.client_secret,\n        redirect_uri: credentials.installed.redirect_uris[0]\n      };\n    })\n    .catch(SyntaxError, function(err) {\n      console.log('Invalid file contents'.red);\n    })\n    .error(function(err) {\n      console.log('Unable to read file'.red);\n      throw err;\n    });\n}\n\nfunction authenticateWithGoogle(credentials, withWebserver) {\n  return new Promise(function(resolve, reject) {\n\n    var redirect_uri = credentials.redirect_uri;\n    if (withWebserver) {\n      redirect_uri = 'http://localhost:' + defaults.WEBSERVER_PORT;\n    }\n\n    var oauth2Client = new OAuth2Client(credentials.client_id, credentials.client_secret, redirect_uri);\n    var url = oauth2Client.generateAuthUrl({\n      access_type: 'offline', // Required to receive a refresh token\n      approval_prompt: 'force',\n      scope: GOOGLE_AUTH_SCOPE\n    });\n\n\n    var getToken = function(code) {\n      oauth2Client.getToken(code, function(err, tokens) {\n        if (err) { reject(err); }\n        credentials.refresh_token = tokens.refresh_token;\n        resolve(credentials);\n      });\n    };\n\n    console.log('\\nPlease visit the following url in your browser (you\\'ll only have to do this once):'.cyan, url.green);\n\n    if (withWebserver) {\n\n      require('../miniOAuthServer')(defaults.WEBSERVER_PORT)\n        .then(getToken)\n        .catch(function(err) {\n          console.log('Something went wrong with the webserver'.red);\n          throw err;\n        });\n\n    } else {\n\n      var rl = readline.createInterface({\n        input: process.stdin,\n        output: process.stdout\n      });\n\n      rl.question('Copy the provided code and paste it here: ', function(code) {\n        rl.close();\n\n        getToken(code);\n\n      });\n    }\n  });\n}\n\nfunction saveAuthenticationConfig(credentials) {\n  return fs.writeFileAsync(defaults.STORAGE_FILE, JSON.stringify(credentials, \"\", 2));\n}\n\nfunction cleanUp() {\n  process.stdin.destroy();\n}\n","/home/travis/build/npmtest/node-npmtest-node-google-apps-script/node_modules/node-google-apps-script/bin/gapps":"#!/usr/bin/env node\nvar _ = require('lodash');\nvar path = require('path');\nvar program = require('commander');\nvar pkg = require('../package.json');\n\nvar commands = path.join(__dirname, '../lib/commands');\n\nprogram\n  .version(pkg.version);\n\nprogram\n  .command('auth <path/to/client/secret.json>')\n  .option('-b, --no-launch-browser',\n    'Do not use a local webserver to capture oauth code and instead require copy/paste')\n  .option('-p, --port [port]', 'Port to use for webserver')\n  .description('Authorize gapps to use the Google Drive API')\n  .action(function(clientSecretPath, options) {\n    require(commands + '/auth')(clientSecretPath, options.launchBrowser)\n      .then(function() {\n        process.exit(0);\n      });\n  });\n\nprogram\n  .command('upload')\n  .description('Upload back to an Apps Script project in Google Drive. Run from root of project directory')\n  .alias('push')\n  .action(require(commands + '/upload'));\n\nprogram\n  .command('init <fileId>')\n  .option('-k, --key [key]')\n  .option('-s, --subdir [subdir]')\n  .option('-o, --overwrite')\n  .description('Initialize project. The external Apps Script project must exist.')\n  .alias('clone')\n  .action(require(commands + '/init'));\n\nprogram\n  .command('oauth-callback-url')\n  .description('Get the OAuth Callback URL for a project')\n  .action(require(commands + '/oauthCallbackUrl'));\n\nprogram\n  .parse(process.argv);\n\nif (program.args.length < 1 ) {\n  console.log('No command specified.');\n  program.outputHelp();\n  process.exit(2);\n}\n","/home/travis/build/npmtest/node-npmtest-node-google-apps-script/node_modules/node-google-apps-script/lib/commands/upload.js":"var _ = require('lodash');\nvar colors = require('colors');\nvar google = require('googleapis');\nvar Promise = require('bluebird');\n\nvar defaults = require('../defaults');\nvar manifestor = require('../manifestor');\nvar authenticate = require('../authenticate');\n\nmodule.exports = function upload() {\n  console.log('Pushing back up to Google Drive...');\n\n  var fileId; // Hold in closure to avoid promise nesting\n\n  return manifestor.get()\n    .then(function(config) {\n      fileId = config.fileId;\n      return manifestor.getExternalFiles(fileId)\n    })\n    .then(function(externalFiles) {\n      return manifestor.build(externalFiles);\n    })\n    .then(function(files) {\n      return sendToGoogle(files, fileId);\n    })\n    .then(function() {\n      console.log('The latest files were successfully uploaded to your Apps Script project.'.green);\n    })\n    .catch(function(err) {\n      console.log('Upload failed.'.red);\n    });\n};\n\nfunction sendToGoogle(files, id) {\n  if (!files.length) {\n    console.log('No Files to upload.'.red);\n    throw 'manifest file length is 0';\n  }\n\n  return authenticate()\n    .then(function(auth) {\n      var drive = google.drive({ version: 'v2', auth: auth });\n      var options = {\n        fileId: id,\n        media: {\n          mimeType: 'application/vnd.google-apps.script+json',\n          body: JSON.stringify({ files: files })\n        }\n      };\n\n      return Promise.promisify(drive.files.update)(options)\n        .catch(function(err) {\n          console.log('An error occured while running upload command: '.red + err.message);\n          throw err;\n        });\n    });\n}\n","/home/travis/build/npmtest/node-npmtest-node-google-apps-script/node_modules/node-google-apps-script/lib/authenticate.js":"var colors = require('colors');\nvar OAuth2Client = require('googleapis').auth.OAuth2;\n\nvar Promise = require('bluebird');\nvar fs = Promise.promisifyAll(require('fs'));\n\nvar defaults = require('./defaults');\n\nmodule.exports = function authenticate() {\n  return getCredentials()\n    .then(createAuthClient)\n    .catch(function(err) {\n      console.log('Error in authenticate module', err);\n    });\n};\n\nfunction getCredentials() {\n  return fs.readFileAsync(defaults.STORAGE_FILE)\n    .then(JSON.parse)\n    .catch(SyntaxError, function(e) {\n      console.log('Could not parse credentials'.red);\n    })\n    .error(function(e) {\n      console.log('Could not read path to credentials file. Please check your path and try again'.red);\n      throw err;\n    });\n}\n\nfunction createAuthClient(credentials) {\n  var auth = new OAuth2Client(\n    credentials.client_id,\n    credentials.client_secret,\n    credentials.redirect_uri\n  );\n\n  // refreshAccessToken requires refresh_token to be set\n  auth.credentials.refresh_token = credentials.refresh_token;\n  return new Promise(function(resolve, reject) {\n    auth.refreshAccessToken(function(err, tokens) {\n      if (err) return reject(err);\n      auth.setCredentials(tokens);\n      resolve(auth);\n    });\n  });\n}\n","/home/travis/build/npmtest/node-npmtest-node-google-apps-script/node_modules/node-google-apps-script/lib/defaults.js":"module.exports = {\n  DEFAULT_SUBDIR: 'src',\n  STORAGE_FILE: getUserHome() + '/.gapps',\n  CONFIG_NAME: 'gapps.config.json',\n  WEBSERVER_PORT: 2386,\n  DOWNLOAD_URL: 'https://script.google.com/feeds/download/export?format=json&id='\n};\n\nfunction getUserHome() {\n  return process.env[(process.platform == 'win32') ? 'USERPROFILE' : 'HOME'];\n}\n","/home/travis/build/npmtest/node-npmtest-node-google-apps-script/node_modules/node-google-apps-script/lib/manifestor.js":"var _ = require('lodash');\nvar path = require('path');\nvar colors = require('colors');\n\nvar Promise = require('bluebird');\nvar fs = Promise.promisifyAll(require('fs'));\nvar request = Promise.promisifyAll(require('request'));\n\nvar util = require('./util');\nvar defaults = require('./defaults');\nvar authenticate = require('./authenticate');\n\n/**\n  build generates a manifest to be uploaded to google drive\n  @param externalFiles {Object} files in the cloud\n  @return {Object} manifest\n */\nvar build = function(externalFiles) {\n  return getConfig().get('path')\n    .then(util.getFilesFromDisk)\n    .then(function(files) {\n\n      // for each manifest file, if it has an equivalent on disk, keep it\n      // otherwise trash it\n      var filesToUpload = _.filter(externalFiles, function(externalFile) {\n        return util.hasFileOnDisk(files, externalFile);\n      });\n\n      _.each(files, function(file) {\n        // Add new file or update existing record\n        var manifestFile = getFileInManifest(filesToUpload, file);\n        if (manifestFile === undefined) {\n          // add\n          filesToUpload.push({\n            name: file.name,\n            type: util.getFileType(file),\n            source: file.content\n          });\n\n        } else {\n          // update\n          util.updateFileSource(manifestFile, file);\n        }\n      });\n\n      return filesToUpload;\n    });\n};\n\nfunction getFileInManifest(files, file) {\n  return _.findWhere(files, {\n    name: file.name,\n    type: util.getFileType(file)\n  });\n}\n\nfunction getExternalFiles(fileId) {\n  return authenticate()\n    .then(function(auth) {\n      return getProjectFiles(fileId, auth);\n    })\n    .catch(function(err) {\n      console.log('Script file ID not found. Please input an ID and try again.'.red);\n      throw err;\n    });\n}\n\n\nfunction getProjectFiles(fileId, auth) {\n  var options = {\n    url: defaults.DOWNLOAD_URL + fileId,\n    qs : {\n      'access_token': auth.credentials.access_token\n    }\n  };\n\n  return request.getAsync(options)\n    .spread(function(res, body) {\n      return JSON.parse(body);\n    })\n    .then(function(project) {\n      if (!project.files) {\n        throw 'Looks like there are no files associated with this project. Check the id and try again.';\n      }\n      return project.files;\n    })\n    .catch(SyntaxError, function(err) {\n      console.log('Error parsing project files'.red);\n      throw err;\n    })\n    .error(function(err){ \n      throw err;\n    });\n}\n\nfunction throwIfConfig() {\n  return fs.readFileAsync(defaults.CONFIG_NAME)\n    .then(JSON.parse)\n    .then(function() {\n      throw 'Config already exists. Cowardly refusing to overwrite.';\n    })\n    .error(function() {\n      // swallow error\n    });\n}\n\nfunction getConfig() {\n  return fs.readFileAsync(defaults.CONFIG_NAME)\n    .then(JSON.parse)\n    .catch(SyntaxError, function(err) {\n      console.log('Error parsing config'.red);\n      throw err;\n    })\n    .error(function(err) {\n      console.log('Config does not exist'.red);\n      throw err;\n    });\n}\n\nfunction setConfig(config) {\n  return fs.writeFileAsync(defaults.CONFIG_NAME, JSON.stringify(config, \"\", 2))\n    .then(function() {\n      return config;\n    });\n}\n\nmodule.exports.build = build;\nmodule.exports.get = getConfig;\nmodule.exports.set = setConfig;\nmodule.exports.getExternalFiles = getExternalFiles;\nmodule.exports.throwIfConfig = throwIfConfig;\n","/home/travis/build/npmtest/node-npmtest-node-google-apps-script/node_modules/node-google-apps-script/lib/miniOAuthServer.js":"var url = require('url');\nvar http = require('http');\nvar Promise = require('bluebird');\n\nmodule.exports = function createOAuthServer(port) {\n  return new Promise(function(resolve, reject) {\n\n    var server = http.createServer(function(req, res) {\n      var query = url.parse(req.url, true).query;\n      if (!query.code) {\n        reject('No code in request; did you access this url manually?');\n      }\n      resolve(query.code);\n\n      res.writeHead(200, {'Content-Type': 'text/html'});\n      res.write('<!DOCTYPE \"html\">');\n      res.write('<html>');\n      res.write('<head>');\n      res.write('<title>Successfully Authenticated</title>');\n      res.write('</head>');\n      res.write('<body>');\n      res.write('You\\'ve been authenticated with Google Drive! You may close this page.');\n      res.write('</body>');\n      res.write('</html>');\n      server.close();\n    });\n\n    server.listen(port);\n  });\n};\n","/home/travis/build/npmtest/node-npmtest-node-google-apps-script/node_modules/node-google-apps-script/lib/util.js":"var _ = require('lodash');\nvar dir = require('node-dir');\nvar path = require('path');\nvar Promise = require('bluebird');\n\nfunction getFilesFromDisk(subdir) {\n  return new Promise(function(resolve, reject) {\n\n    var filesOnDisk = [];\n\n    // Only iterate through supported .js, .gs and .html files in dir\n    dir.readFiles(subdir, { match: /.js$|.gs$|.html$/ },\n      // Invoke this callback on each file\n      function(err, content, filename, next) {\n        if (err) return reject(err);\n\n        // Parse file's absolute path and add its content to result object\n        file = path.parse(filename);\n        file.content = content;\n\n        filesOnDisk.push(file);\n\n        // Continue to next file\n        next();\n      },\n      // finished callback.\n      function(err) {\n        if (err) return reject(err);\n        resolve(filesOnDisk);\n      });\n  })\n  .error(function() {\n    // swallow ENOENT\n    return [];\n  });\n}\n\nfunction updateFileSource(existingFile, newFile) {\n  existingFile.source = newFile.content;\n}\n\nfunction hasFileOnDisk(filesOnDisk, file) {\n  return _.any(filesOnDisk, function(fileOnDisk) {\n    var sameName = file.name === fileOnDisk.name;\n    var sameType = file.type === getFileType(fileOnDisk);\n    return sameName && sameType;\n  });\n}\n\nfunction getFileType(file) {\n  if (file.ext === '.js') return 'server_js';\n  if (file.ext === '.gs') return 'server_js';\n  if (file.ext === '.html') return 'html';\n  throw new Error('Unsupported file type found. Google Apps Script only allows .js and .html');\n}\n\nfunction getFileExtension(file) {\n  if (file.type === 'server_js') return '.js';\n  if (file.type === 'html') return '.html';\n  throw new Error('Unsupported file type found');\n}\n\nfunction swapGStoJS(filename) {\n  if (filename.indexOf('.gs') === filename.length - 3) {\n    return filename.substr(0, filename.lastIndexOf('.gs')) + '.js';\n  }\n  return filename;\n}\n\n\nmodule.exports.getFilesFromDisk = getFilesFromDisk;\nmodule.exports.updateFileSource = updateFileSource;\nmodule.exports.hasFileOnDisk = hasFileOnDisk;\nmodule.exports.getFileType = getFileType;\nmodule.exports.getFileExtension = getFileExtension;\nmodule.exports.swapGStoJS = swapGStoJS;\n","/home/travis/build/npmtest/node-npmtest-node-google-apps-script/node_modules/node-google-apps-script/lib/commands/init.js":"var colors = require('colors');\nvar mkdirp = require('mkdirp');\n\nvar Promise = require('bluebird');\nvar fs = Promise.promisifyAll(require('fs'));\n\nvar util = require('../util')\nvar defaults = require('../defaults');\nvar manifestor = require('../manifestor');\n\nmodule.exports = function init(fileId, options) {\n  var subdir = options.subdir || defaults.DEFAULT_SUBDIR;\n  \n  if(!fileIdIsValid(fileId)) {\n    return;\n  }\n  \n  var config = {\n    path: subdir,\n    fileId: fileId,\n    key: options.key\n  };\n\n  var overwritePromise = options.overwrite ?\n    Promise.resolve() :\n    manifestor.throwIfConfig();\n\n  return overwritePromise\n    .then(function() {\n      return manifestor.set(config);\n    })\n    .then(function() {\n      return mkdirp(subdir);\n    })\n    .then(function(config) {\n      return manifestor.getExternalFiles(fileId)\n    })\n    .map(function(file) {\n      return writeExternalFile(file, subdir)\n    })\n    .catch(function(err) {\n      console.log('Error running init command'.red);\n      throw err;\n    });\n};\n\nfunction writeExternalFile(file, dir) {\n  var filename = file.name + util.getFileExtension(file)\n  return fs.writeFileAsync(dir + '/' + filename, file.source)\n    .catch(function(err) {\n      console.log('Could not write file ' + filename);\n      throw err;\n    })\n}\n\nfunction fileIdIsValid(fileId) {\n  if(fileId.charAt(0).toLowerCase() === 'm') {\n    console.log('\\nScript file ID error.'.red + '\\n' + \n        'It looks like you are passing in a Project Key, from \"File --> Project properties\",' +\n        'rather than a Drive File ID.\\nYou will find the Drive File ID in the script\\'s URL:\\n' +\n        'https://script.google.com/a/google.com/d/' + '__DRIVE_FILE_ID__'.green + '/edit.\\n');\n     return false;\n  } else {\n     return true;\n  } \n}","/home/travis/build/npmtest/node-npmtest-node-google-apps-script/node_modules/node-google-apps-script/lib/commands/oauthCallbackUrl.js":"var defaults = require('../defaults');\nvar manifestor = require('../manifestor');\n\nmodule.exports = function() {\n  return manifestor.get()\n    .then(function(config) {\n      if (config.key) {\n        console.log('https://script.google.com/macros/d/' + config.key + '/usercallback');\n      } else {\n        console.log('No Project Key provided in ' + defaults.CONFIG_NAME);\n      }\n    });\n};\n"}